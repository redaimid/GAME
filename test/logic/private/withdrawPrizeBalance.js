const {
    Keyboard
} = require('vk-io')
const util = require('../../addons/util.js')
const config = require('../../config.js')
const keyboards = require('../../addons/keyboards')

module.exports = async function (db, vk, context, limits) {

    if (context.messagePayload) {
        // –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–≤–æ–¥–∞
        if (context.messagePayload.command == 'withdrawPrizeBalance') {
            if (db.playersData[context.senderId].prizeBalance > 0) {
                return context.send({
                    message: `–ü—Ä–∏–≤–µ—Ç, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å! –í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à :3`,
                    keyboard: Keyboard.builder()
                        .textButton({
                            label: `üî• –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫–æ–∏–Ω—ã`,
                            payload: {
                                command: `withdrawPrizeBalance_ChangeOnCoin`
                            },
                            color: 'positive'
                        }).row()
                        .textButton({
                            label: `QIWI`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `YooMoney`,
                            payload: {
                                command: 'withdrawPrizeBalance_YooMoney'
                            }
                        }).row()
                        .textButton({
                            label: `–ù–∞ –∫–∞—Ä—Ç—É`,
                            payload: {
                                command: 'withdrawPrizeBalance_Card'
                            }
                        })
                        .textButton({
                            label: `–í VKCoin`,
                            payload: {
                                command: 'withdrawPrizeBalance_VKCoin'
                            }
                        }).row()
                        .textButton({
                            label: `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
                            payload: {
                                command: "mainmenu"
                            },
                            color: 'negative'
                        })
                })


            }
        }
        // –û–±–º–µ–Ω —Ä—É–±–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ –∫–æ–∏–Ω—ã
        if (context.messagePayload.command == 'withdrawPrizeBalance_ChangeOnCoin') {
            if (db.playersData[context.senderId].prizeBalance <= 0) return
            let confirm = await context.question({
                message: `–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ ${util.number_format(db.playersData[context.senderId].prizeBalance * 1000)} –∫–æ–∏–Ω–æ–≤?`,
                keyboard: Keyboard.builder()
                    .textButton({
                        label: `–î–∞, —É–≤–µ—Ä–µ–Ω`,
                        color: 'positive'
                    }).row()
                    .textButton({
                        label: `–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞`,
                        color: 'negative'
                    })
            })
            if (confirm.text != '–î–∞, —É–≤–µ—Ä–µ–Ω') {
                return context.send({
                    message: `–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                    keyboard: Keyboard.builder()
                        .textButton({
                            label: `üî• –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫–æ–∏–Ω—ã`,
                            payload: {
                                command: `withdrawPrizeBalance_ChangeOnCoin`
                            },
                            color: 'positive'
                        }).row()
                        .textButton({
                            label: `QIWI`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `YooMoney`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ù–∞ –∫–∞—Ä—Ç—É`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `–í VKCoin`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
                            payload: {
                                command: "mainmenu"
                            },
                            color: 'negative'
                        })
                })
            }
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if (limits.users.includes(context.senderId)) {
                limits.push(context.senderId)
                return setTimeout(async () => {
                    limits.users.splice(-1, context.senderId)
                }, 500)
            }
            limits.users.push(context.senderId)
            setTimeout(async () => {
                limits.users.splice(-1, context.senderId)
            }, 500)

            let colvo = db.playersData[context.senderId].prizeBalance
            db.playersData[context.senderId].balance += Math.floor(db.playersData[context.senderId].prizeBalance * 1000)
            db.playersData[context.senderId].prizeBalance = 0
            return context.send({
                message: `–¢—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª ${colvo}—Ä –Ω–∞ ${util.number_format(colvo * 1000)}. –ü—Ä–∏—è—Ç–Ω—ã—Ö —Ç–µ–±–µ –∏–≥—Ä!`,
                keyboard: keyboards.main_menu
            })

        }

        // –í—ã–≤–æ–¥ –Ω–∞ QIWI
        if (context.messagePayload.command == 'withdrawPrizeBalance_Qiwi') {
            if (db.playersData[context.senderId].prizeBalance <= 0) return
            if (db.playersData[context.senderId].userData.bankData.qiwi == null) {
                return context.send({
                    message: `–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä QIWI –ö–æ—à–µ–ª—å–∫–∞\n–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"`
                })
            }


            let confirm = await context.question({
                message: `–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ QIWI –ö–æ—à–µ–ª–µ–∫ ${db.playersData[context.senderId].userData.bankData.qiwi}?`,
                keyboard: Keyboard.builder()
                    .textButton({
                        label: `–î–∞, —É–≤–µ—Ä–µ–Ω`,
                        color: 'positive'
                    }).row()
                    .textButton({
                        label: `–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞`,
                        color: 'negative'
                    })
            })
            if (confirm.text != '–î–∞, —É–≤–µ—Ä–µ–Ω') {
                return context.send({
                    message: `–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                    keyboard: Keyboard.builder()
                        .textButton({
                            label: `üî• –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫–æ–∏–Ω—ã`,
                            payload: {
                                command: `withdrawPrizeBalance_ChangeOnCoin`
                            },
                            color: 'positive'
                        }).row()
                        .textButton({
                            label: `QIWI`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `YooMoney`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ù–∞ –∫–∞—Ä—Ç—É`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `–í VKCoin`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
                            payload: {
                                command: "mainmenu"
                            },
                            color: 'negative'
                        })
                })
            }
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if (limits.users.includes(context.senderId)) {
                limits.push(context.senderId)
                return setTimeout(async () => {
                    limits.users.splice(-1, context.senderId)
                }, 500)
            }
            limits.users.push(context.senderId)
            setTimeout(async () => {
                limits.users.splice(-1, context.senderId)
            }, 500)


            vk.api.messages.send({
                peer_id: config.admin,
                message: `[id${context.senderId}|–ò–≥—Ä–æ–∫] –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ QIWI –ö–æ—à–µ–ª–µ–∫ ${db.playersData[context.senderId].userData.bankData.qiwi}`,
                random_id: util.random(-200000000, 200000000)
            })
            db.playersData[context.senderId].prizeBalance = 0

            return context.send({
                message: `–ó–∞—è–≤–∫–∞ –Ω–∞ QIWI –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —É —Å–µ–±—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ :3`,
                keyboard: keyboards.main_menu
            })

        }

        // –í—ã–≤–æ–¥ –Ω–∞ YooMoney
        if (context.messagePayload.command == 'withdrawPrizeBalance_YooMoney') {
            if (db.playersData[context.senderId].prizeBalance <= 0) return
            if (db.playersData[context.senderId].userData.bankData.YooMoney == null) {
                return context.send({
                    message: `–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä YooMoney –ö–æ—à–µ–ª—å–∫–∞\n–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"`
                })
            }


            let confirm = await context.question({
                message: `–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ YooMoney –ö–æ—à–µ–ª–µ–∫ ${db.playersData[context.senderId].userData.bankData.qiwi}?`,
                keyboard: Keyboard.builder()
                    .textButton({
                        label: `–î–∞, —É–≤–µ—Ä–µ–Ω`,
                        color: 'positive'
                    }).row()
                    .textButton({
                        label: `–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞`,
                        color: 'negative'
                    })
            })
            if (confirm.text != '–î–∞, —É–≤–µ—Ä–µ–Ω') {
                return context.send({
                    message: `–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                    keyboard: Keyboard.builder()
                        .textButton({
                            label: `üî• –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫–æ–∏–Ω—ã`,
                            payload: {
                                command: `withdrawPrizeBalance_ChangeOnCoin`
                            },
                            color: 'positive'
                        }).row()
                        .textButton({
                            label: `QIWI`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `YooMoney`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ù–∞ –∫–∞—Ä—Ç—É`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `–í VKCoin`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
                            payload: {
                                command: "mainmenu"
                            },
                            color: 'negative'
                        })
                })
            }
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if (limits.users.includes(context.senderId)) {
                limits.push(context.senderId)
                return setTimeout(async () => {
                    limits.users.splice(-1, context.senderId)
                }, 500)
            }
            limits.users.push(context.senderId)
            setTimeout(async () => {
                limits.users.splice(-1, context.senderId)
            }, 500)


            vk.api.messages.send({
                peer_id: config.admin,
                message: `[id${context.senderId}|–ò–≥—Ä–æ–∫] –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ YooMoney –ö–æ—à–µ–ª–µ–∫ ${db.playersData[context.senderId].userData.bankData.qiwi}`,
                random_id: util.random(-200000000, 200000000)
            })
            db.playersData[context.senderId].prizeBalance = 0

            return context.send({
                message: `–ó–∞—è–≤–∫–∞ –Ω–∞ YooMoney –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —É —Å–µ–±—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ :3`,
                keyboard: keyboards.main_menu
            })

        }

        // –í—ã–≤–æ–¥ –Ω–∞ –ö–∞—Ä—Ç—É
        if (context.messagePayload.command == 'withdrawPrizeBalance_Card') {
            if (db.playersData[context.senderId].prizeBalance <= 0) return
            if (db.playersData[context.senderId].userData.bankData.Card == null) {
                return context.send({
                    message: `–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"`
                })
            }


            let confirm = await context.question({
                message: `–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ –∫–∞—Ä—Ç—É ${db.playersData[context.senderId].userData.bankData.qiwi}?`,
                keyboard: Keyboard.builder()
                    .textButton({
                        label: `–î–∞, —É–≤–µ—Ä–µ–Ω`,
                        color: 'positive'
                    }).row()
                    .textButton({
                        label: `–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞`,
                        color: 'negative'
                    })
            })
            if (confirm.text != '–î–∞, —É–≤–µ—Ä–µ–Ω') {
                return context.send({
                    message: `–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                    keyboard: Keyboard.builder()
                        .textButton({
                            label: `üî• –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫–æ–∏–Ω—ã`,
                            payload: {
                                command: `withdrawPrizeBalance_ChangeOnCoin`
                            },
                            color: 'positive'
                        }).row()
                        .textButton({
                            label: `QIWI`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `YooMoney`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ù–∞ –∫–∞—Ä—Ç—É`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `–í VKCoin`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
                            payload: {
                                command: "mainmenu"
                            },
                            color: 'negative'
                        })
                })
            }
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if (limits.users.includes(context.senderId)) {
                limits.push(context.senderId)
                return setTimeout(async () => {
                    limits.users.splice(-1, context.senderId)
                }, 500)
            }
            limits.users.push(context.senderId)
            setTimeout(async () => {
                limits.users.splice(-1, context.senderId)
            }, 500)


            vk.api.messages.send({
                peer_id: config.admin,
                message: `[id${context.senderId}|–ò–≥—Ä–æ–∫] –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É ${db.playersData[context.senderId].prizeBalance}—Ä –Ω–∞ –∫–∞—Ä—Ç—É ${db.playersData[context.senderId].userData.bankData.qiwi}`,
                random_id: util.random(-200000000, 200000000)
            })
            db.playersData[context.senderId].prizeBalance = 0

            return context.send({
                message: `–ó–∞—è–≤–∫–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —É —Å–µ–±—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ :3`,
                keyboard: keyboards.main_menu
            })

        }

        // –í—ã–≤–æ–¥ –Ω–∞ VKCoin
        if (context.messagePayload.command == 'withdrawPrizeBalance_VKCoin') {
            if (db.playersData[context.senderId].prizeBalance <= 0) return


            let confirm = await context.question({
                message: `–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ ${db.playersData[context.senderId].prizeBalance}—Ä –≤ VKCoin?`,
                keyboard: Keyboard.builder()
                    .textButton({
                        label: `–î–∞, —É–≤–µ—Ä–µ–Ω`,
                        color: 'positive'
                    }).row()
                    .textButton({
                        label: `–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞`,
                        color: 'negative'
                    })
            })
            if (confirm.text != '–î–∞, —É–≤–µ—Ä–µ–Ω') {
                return context.send({
                    message: `–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                    keyboard: Keyboard.builder()
                        .textButton({
                            label: `üî• –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫–æ–∏–Ω—ã`,
                            payload: {
                                command: `withdrawPrizeBalance_ChangeOnCoin`
                            },
                            color: 'positive'
                        }).row()
                        .textButton({
                            label: `QIWI`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `YooMoney`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ù–∞ –∫–∞—Ä—Ç—É`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        })
                        .textButton({
                            label: `–í VKCoin`,
                            payload: {
                                command: 'withdrawPrizeBalance_Qiwi'
                            }
                        }).row()
                        .textButton({
                            label: `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
                            payload: {
                                command: "mainmenu"
                            },
                            color: 'negative'
                        })
                })
            }
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if (limits.users.includes(context.senderId)) {
                limits.push(context.senderId)
                return setTimeout(async () => {
                    limits.users.splice(-1, context.senderId)
                }, 500)
            }
            limits.users.push(context.senderId)
            setTimeout(async () => {
                limits.users.splice(-1, context.senderId)
            }, 500)


            vk.api.messages.send({
                peer_id: config.admin,
                message: `[id${context.senderId}|–ò–≥—Ä–æ–∫] –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É ${db.playersData[context.senderId].prizeBalance}—Ä –≤ VKCoin ${db.playersData[context.senderId].userData.bankData.qiwi}`,
                random_id: util.random(-200000000, 200000000)
            })
            db.playersData[context.senderId].prizeBalance = 0

            return context.send({
                message: `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —É —Å–µ–±—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ :3`,
                keyboard: keyboards.main_menu
            })

        }
    }
}